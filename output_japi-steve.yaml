openapi: 3.0.1
info:
  title: Swagger Petstore
  description: "This is a sample server Petstore server.  You can find out more
    about     Swagger at [http://swagger.io](http://swagger.io) or on
    [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample,
    you can use the api key `special-key` to test the
    authorization     filters."
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore.swagger.io/v2
  - url: http://petstore.swagger.io/v2
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: store
    description: Access to Petstore orders
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
paths:
  /pet:
    put:
      tags:
        - pet
      summary: Update an existing pet
      operationId: updatePet
      requestBody:
        description: Pet object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
          application/xml:
            schema:
              $ref: "#/components/schemas/Pet"
        required: true
      responses:
        "400":
          description: Invalid ID supplied
          content: {}
        "404":
          description: Pet not found
          content: {}
        "405":
          description: Validation exception
          content: {}
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - pet
      summary: Add a new pet to the store
      operationId: addPet
      requestBody:
        description: Pet object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
          application/xml:
            schema:
              $ref: "#/components/schemas/Pet"
        required: true
      responses:
        "405":
          description: Invalid input
          content: {}
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/findByStatus:
    get:
      tags:
        - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              default: available
              enum:
                - available
                - pending
                - sold
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
        "400":
          description: Invalid status value
          content: {}
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/findByTags:
    get:
      tags:
        - pet
      summary: Finds Pets by tags
      description: Muliple tags can be provided with comma separated strings.
        Use         tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
        "400":
          description: Invalid tag value
          content: {}
      deprecated: true
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  "/pet/{petId}":
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Pet"
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        "400":
          description: Invalid ID supplied
          content: {}
        "404":
          description: Pet not found
          content: {}
      security:
        - api_key: []
    post:
      tags:
        - pet
      summary: Updates a pet in the store with form data
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the pet
                status:
                  type: string
                  description: Updated status of the pet
      responses:
        "405":
          description: Invalid input
          content: {}
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - pet
      summary: Deletes a pet
      operationId: deletePet
      parameters:
        - name: api_key
          in: header
          description: api key header
          schema:
            type: string
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid ID supplied
          content: {}
        "404":
          description: Pet not found
          content: {}
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  "/pet/{petId}/uploadImage":
    post:
      tags:
        - pet
      summary: uploads an image
      operationId: uploadFile
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                additionalMetadata:
                  type: string
                  description: Additional data to pass to server
                file:
                  type: string
                  description: file to upload
                  format: binary
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      operationId: placeOrder
      requestBody:
        description: order placed for purchasing the pet
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/Order"
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Order"
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid Order
          content: {}
  "/store/order/{orderId}":
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value >= 1 and <=
        10.         Other values will generated exceptions
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of pet that needs to be fetched
          required: true
          schema:
            maximum: 10
            minimum: 1
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Order"
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid ID supplied
          content: {}
        "404":
          description: Order not found
          content: {}
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with positive integer
        value.         Negative or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            minimum: 1
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid ID supplied
          content: {}
        "404":
          description: Order not found
          content: {}
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        default:
          description: successful operation
          content: {}
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      requestBody:
        description: List of user object
        content:
          "*/*":
            schema:
              type: array
              items:
                $ref: "#/components/schemas/User"
        required: true
      responses:
        default:
          description: successful operation
          content: {}
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        description: List of user object
        content:
          "*/*":
            schema:
              type: array
              items:
                $ref: "#/components/schemas/User"
        required: true
      responses:
        default:
          description: successful operation
          content: {}
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  "/user/{username}":
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid username supplied
          content: {}
        "404":
          description: User not found
          content: {}
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Updated user object
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "400":
          description: Invalid user supplied
          content: {}
        "404":
          description: User not found
          content: {}
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid username supplied
          content: {}
        "404":
          description: User not found
          content: {}
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: "#/components/schemas/Category"
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: "#/components/schemas/Tag"
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: Pet
    JsonApi:
      title: JSON:API Schema
      description: This is a schema for responses in the JSON:API format. For more, see
        http://jsonapi.org
      oneOf:
      - $ref: '#/components/schemas/JsonApiSuccess'
      - $ref: '#/components/schemas/JsonApiFailure'
      - $ref: '#/components/schemas/JsonApiInfo'
    JsonApiSuccess:
      type: object
      required:
      - data
      properties:
        data:
          $ref: '#/components/schemas/JsonApiData'
        included:
          description: To reduce the number of HTTP requests, servers **MAY** allow
            responses that include related resources along with the requested primary
            resources. Such responses are called "compound documents".
          type: array
          items:
            $ref: '#/components/schemas/JsonApiResource'
          uniqueItems: true
        meta:
          $ref: '#/components/schemas/JsonApiMeta'
        links:
          description: Link members related to the primary data.
          allOf:
          - $ref: '#/components/schemas/JsonApiLinks'
          - $ref: '#/components/schemas/JsonApiPagination'
        jsonapi:
          $ref: '#/components/schemas/JsonApiImpl'
      additionalProperties: false
    JsonApiFailure:
      type: object
      required:
      - errors
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/JsonApiError'
          uniqueItems: true
        meta:
          $ref: '#/components/schemas/JsonApiMeta'
        jsonapi:
          $ref: '#/components/schemas/JsonApiImpl'
        links:
          $ref: '#/components/schemas/JsonApiLinks'
      additionalProperties: false
    JsonApiInfo:
      type: object
      required:
      - meta
      properties:
        meta:
          $ref: '#/components/schemas/JsonApiMeta'
        links:
          $ref: '#/components/schemas/JsonApiLinks'
        jsonapi:
          $ref: '#/components/schemas/JsonApiImpl'
      additionalProperties: false
    JsonApiMeta:
      description: Non-standard meta-information that can not be represented as an attribute or relationship.
      type: object
      additionalProperties: true
    JsonApiData:
      description: The document's "primary data" is a representation of the resource or collection of resources targeted by a request. Can be null if the request is one that might correspond to a single resource, but doesn't currently.
      nullable: true
      oneOf:
      - $ref: '#/components/schemas/JsonApiResource'
      - description: An array of resource objects, an array of resource identifier objects, or an empty array ([]), for requests that target resource collections.
        type: array
        items:
          $ref: '#/components/schemas/JsonApiResource'
        uniqueItems: true
    JsonApiResource:
      description: '"Resource objects" appear in a JSON:API document to represent resources.'
      type: object
      required:
      - type
      - id
      properties:
        type:
          type: string
        id:
          type: string
        attributes:
          $ref: '#/components/schemas/JsonApiAttributes'
        relationships:
          $ref: '#/components/schemas/JsonApiRelationships'
        links:
          $ref: '#/components/schemas/JsonApiLinks'
        meta:
          $ref: '#/components/schemas/JsonApiMeta'
      additionalProperties: false
    JsonApiRelationshipLinks:
      description: A resource object **MAY** contain references to other resource objects
        ("relationships"). Relationships may be to-one or to-many. Relationships can
        be specified by including a member in a resource's links object.
      type: object
      properties:
        self:
          description: A `self` member, whose value is a URL for the relationship itself
            (a "relationship URL"). This URL allows the client to directly manipulate
            the relationship. For example, it would allow a client to remove an `author`
            from an `article` without deleting the people resource itself.
          $ref: '#/components/schemas/JsonApiLink'
        related:
          $ref: '#/components/schemas/JsonApiLink'
      additionalProperties: true
    JsonApiLinks:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/JsonApiLink'
    JsonApiLink:
      description: 'A link **MUST** be represented as either: a string containing the
        link''s URL or a link object.'
      oneOf:
      - description: A string containing the link's URL.
        type: string
        format: uri-reference
      - type: object
        required:
        - href
        properties:
          href:
            description: A string containing the link's URL.
            type: string
            format: uri-reference
          meta:
            $ref: '#/components/schemas/JsonApiMeta'
    JsonApiAttributes:
      description: Members of the attributes object ("attributes") represent information about the resource object in which it's defined. MUST NOT have properties named relationships, links, id, or type.
      type: object
      additionalProperties: false
    JsonApiRelationships:
      description: Members of the relationships object ("relationships") represent references
        from the resource object in which it's defined to other resource objects. MUST NOT contain properties named id or type.
      type: object
      properties:
        links:
          $ref: '#/components/schemas/JsonApiRelationshipLinks'
        data:
          description: Member, whose value represents "resource linkage".
          oneOf:
          - $ref: '#/components/schemas/JsonApiRelationshipToOne'
          - $ref: '#/components/schemas/JsonApiRelationshipToMany'
        meta:
          $ref: '#/components/schemas/JsonApiMeta'
      anyOf:
      - required:
        - data
      - required:
        - meta
      - required:
        - links
        additionalProperties: false
      additionalProperties: false
    JsonApiRelationshipToOne:
      description: References to other resource objects in a to-one ("relationship").
        Relationships can be specified by including a member in a resource's links object.
      anyOf:
      - $ref: '#/components/schemas/JsonApiEmpty'
      - $ref: '#/components/schemas/JsonApiLinkage'
    JsonApiRelationshipToMany:
      description: An array of objects each containing "type" and "id" members for to-many
        relationships.
      type: array
      items:
        $ref: '#/components/schemas/JsonApiLinkage'
      uniqueItems: true
    JsonApiEmpty:
      description: Describes an empty to-one relationship.
      nullable: true
    JsonApiLinkage:
      description: The "type" and "id" to non-empty members.
      type: object
      required:
      - type
      - id
      properties:
        type:
          type: string
        id:
          type: string
        meta:
          $ref: '#/components/schemas/JsonApiMeta'
      additionalProperties: false
    JsonApiPagination:
      type: object
      properties:
        first:
          description: The first page of data
          type: string
          format: uri-reference
          nullable: true
        last:
          description: The last page of data
          type: string
          format: uri-reference
          nullable: true
        prev:
          description: The previous page of data
          type: string
          format: uri-reference
          nullable: true
        next:
          description: The next page of data
          type: string
          format: uri-reference
          nullable: true
    JsonApiImpl:
      description: An object describing the server's implementation
      type: object
      properties:
        version:
          type: string
        meta:
          $ref: '#/components/schemas/JsonApiMeta'
      additionalProperties: false
    JsonApiError:
      type: object
      properties:
        id:
          description: A unique identifier for this particular occurrence of the problem.
          type: string
        links:
          $ref: '#/components/schemas/JsonApiLinks'
        status:
          description: The HTTP status code applicable to this problem, expressed as
            a string value.
          type: string
        code:
          description: An application-specific error code, expressed as a string value.
          type: string
        title:
          description: A short, human-readable summary of the problem. It **SHOULD NOT**
            change from occurrence to occurrence of the problem, except for purposes
            of localization.
          type: string
        detail:
          description: A human-readable explanation specific to this occurrence of the
            problem.
          type: string
        source:
          type: object
          properties:
            pointer:
              description: A JSON Pointer [RFC6901] to the associated entity in the
                request document [e.g. "/data" for a primary data object, or "/data/attributes/title"
                for a specific attribute].
              type: string
            parameter:
              description: A string indicating which query parameter caused the error.
              type: string
        meta:
          $ref: '#/components/schemas/JsonApiMeta'
      additionalProperties: false
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
